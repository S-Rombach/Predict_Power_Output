{'force_int_remainder_cols': True, 'n_jobs': None, 'remainder': 'drop', 'sparse_threshold': 0.3, 'transformer_weights': None, 'transformers': [('dayofyear', FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E666840>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E6668E0>), ['date']), ('sin', Pipeline(steps=[('extract_dayofyear',
                 FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E54D620>,
                                     func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A62B3EA660>)),
                ('transform_sin',
                 FunctionTransformer(feature_names_out=<function sin_transformer.<locals>.get_feature_names at 0x000001A64E637A60>,
                                     func=<function sin_transformer.<locals>._sin_transformer at 0x000001A64E666020>))]), ['date']), ('cos', Pipeline(steps=[('extract_dayofyear',
                 FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E6660C0>,
                                     func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E666700>)),
                ('transform_cos',
                 FunctionTransformer(feature_names_out=<function cos_transformer.<locals>.get_feature_names at 0x000001A64E666660>,
                                     func=<function cos_transformer.<locals>._cos_transformer at 0x000001A64E6667A0>))]), ['date'])], 'verbose': False, 'verbose_feature_names_out': True, 'dayofyear': FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E666840>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E6668E0>), 'sin': Pipeline(steps=[('extract_dayofyear',
                 FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E54D620>,
                                     func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A62B3EA660>)),
                ('transform_sin',
                 FunctionTransformer(feature_names_out=<function sin_transformer.<locals>.get_feature_names at 0x000001A64E637A60>,
                                     func=<function sin_transformer.<locals>._sin_transformer at 0x000001A64E666020>))]), 'cos': Pipeline(steps=[('extract_dayofyear',
                 FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E6660C0>,
                                     func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E666700>)),
                ('transform_cos',
                 FunctionTransformer(feature_names_out=<function cos_transformer.<locals>.get_feature_names at 0x000001A64E666660>,
                                     func=<function cos_transformer.<locals>._cos_transformer at 0x000001A64E6667A0>))]), 'dayofyear__accept_sparse': False, 'dayofyear__check_inverse': True, 'dayofyear__feature_names_out': <function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E666840>, 'dayofyear__func': <function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E6668E0>, 'dayofyear__inv_kw_args': None, 'dayofyear__inverse_func': None, 'dayofyear__kw_args': None, 'dayofyear__validate': False, 'sin__memory': None, 'sin__steps': [('extract_dayofyear', FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E54D620>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A62B3EA660>)), ('transform_sin', FunctionTransformer(feature_names_out=<function sin_transformer.<locals>.get_feature_names at 0x000001A64E637A60>,
                    func=<function sin_transformer.<locals>._sin_transformer at 0x000001A64E666020>))], 'sin__verbose': False, 'sin__extract_dayofyear': FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E54D620>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A62B3EA660>), 'sin__transform_sin': FunctionTransformer(feature_names_out=<function sin_transformer.<locals>.get_feature_names at 0x000001A64E637A60>,
                    func=<function sin_transformer.<locals>._sin_transformer at 0x000001A64E666020>), 'sin__extract_dayofyear__accept_sparse': False, 'sin__extract_dayofyear__check_inverse': True, 'sin__extract_dayofyear__feature_names_out': <function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E54D620>, 'sin__extract_dayofyear__func': <function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A62B3EA660>, 'sin__extract_dayofyear__inv_kw_args': None, 'sin__extract_dayofyear__inverse_func': None, 'sin__extract_dayofyear__kw_args': None, 'sin__extract_dayofyear__validate': False, 'sin__transform_sin__accept_sparse': False, 'sin__transform_sin__check_inverse': True, 'sin__transform_sin__feature_names_out': <function sin_transformer.<locals>.get_feature_names at 0x000001A64E637A60>, 'sin__transform_sin__func': <function sin_transformer.<locals>._sin_transformer at 0x000001A64E666020>, 'sin__transform_sin__inv_kw_args': None, 'sin__transform_sin__inverse_func': None, 'sin__transform_sin__kw_args': None, 'sin__transform_sin__validate': False, 'cos__memory': None, 'cos__steps': [('extract_dayofyear', FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E6660C0>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E666700>)), ('transform_cos', FunctionTransformer(feature_names_out=<function cos_transformer.<locals>.get_feature_names at 0x000001A64E666660>,
                    func=<function cos_transformer.<locals>._cos_transformer at 0x000001A64E6667A0>))], 'cos__verbose': False, 'cos__extract_dayofyear': FunctionTransformer(feature_names_out=<function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E6660C0>,
                    func=<function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E666700>), 'cos__transform_cos': FunctionTransformer(feature_names_out=<function cos_transformer.<locals>.get_feature_names at 0x000001A64E666660>,
                    func=<function cos_transformer.<locals>._cos_transformer at 0x000001A64E6667A0>), 'cos__extract_dayofyear__accept_sparse': False, 'cos__extract_dayofyear__check_inverse': True, 'cos__extract_dayofyear__feature_names_out': <function dayofyear_extractor.<locals>.get_feature_names at 0x000001A64E6660C0>, 'cos__extract_dayofyear__func': <function dayofyear_extractor.<locals>.extract_dayofyear at 0x000001A64E666700>, 'cos__extract_dayofyear__inv_kw_args': None, 'cos__extract_dayofyear__inverse_func': None, 'cos__extract_dayofyear__kw_args': None, 'cos__extract_dayofyear__validate': False, 'cos__transform_cos__accept_sparse': False, 'cos__transform_cos__check_inverse': True, 'cos__transform_cos__feature_names_out': <function cos_transformer.<locals>.get_feature_names at 0x000001A64E666660>, 'cos__transform_cos__func': <function cos_transformer.<locals>._cos_transformer at 0x000001A64E6667A0>, 'cos__transform_cos__inv_kw_args': None, 'cos__transform_cos__inverse_func': None, 'cos__transform_cos__kw_args': None, 'cos__transform_cos__validate': False}